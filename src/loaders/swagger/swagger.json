{
  "openapi": "3.0.0",
  "info": {
    "title": "ZENDALA Api",
    "description": "## This a api ZENDALA",
    "version": "0.0.1",
    "contact": {
      "email": "mauricioarizaga@hotmail.com"
    }
  },

  "servers": [
    {
      "url": "http://localhost:4000/api",
      "description": "Desarrollo"
    },
    {
      "url": "",
      "description": "Producci√≥n"
    }
  ],
  "tags": [
    {
      "name": "users",
      "description": "Operations about users."
    }
  ],
  "paths": {
    "/users": {
      "get": {
        "tags": ["users"],
        "summary": "Return a list of existing users",
        "description": "# Service for retrieve users",
        "responses": {
          "200": {
            "description": "A JSON Array of users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorDB"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["users"],
        "summary": "Create a new user.",
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateAndUpdate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created."
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorDB"
                }
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": ["users"],
        "summary": "Return a list of users providing an existing id.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user you want to see.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON Array of users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorDB"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["users"],
        "summary": "Update an existing user by providing the correct id.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user that needs to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateAndUpdate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorDB"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["users"],
        "summary": "Delete an existing user by providing the correct id.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user that needs to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted."
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorDB"
                }
              }
            }
          }
        }
      }
    },
  
    "/customers": {
      "get": {
        "tags": ["customers"],
        "summary": "Return a list of existing customers",
        "description": "# Service for retrieve customers",
        "responses": {
          "200": {
            "description": "A JSON Array of customers.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Customer"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorDB"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["customers"],
        "summary": "Create a new customers.",
        "description": "",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCreateAndUpdate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "customers created."
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorDB"
                }
              }
            }
          }
        }
      }
    },
    "/customers/{id}": {
      "get": {
        "tags": ["customers"],
        "summary": "Return a list of customers providing an existing id.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user you want to see.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON Array of users.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Customer"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorDB"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["customers"],
        "summary": "Update an existing user by providing the correct id.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user that needs to be updated.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerCreateAndUpdate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "customers updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/Customer"
                }
              }
            }
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorDB"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["customers"],
        "summary": "Delete an existing user by providing the correct id.",
        "description": "",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the user that needs to be deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "customers deleted."
          },
          "400": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/RequestError"
                }
              }
            }
          },
          "500": {
            "description": "Error message in JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorDB"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Customer": {
        "required": ["id"],
        "type": "object",
        "properties": {
          
          "id": {
            "description": "The customer id.",
            "type": "string",
            "example": "25acd789def..."
          },
          "email": {
            "description": "The customer email.",
            "type": "string",
            "example": "example@mail.com"
          },
          "name": {
            "description": "The customer password.",
            "type": "string",
            "example": "Mauricio"
          },
          "createdAt": {
            "description": "date of the customer creation.",
            "type": "date",
            "example": "YY-MM-DD -> 1989-12-31"
          },
          "updatedAt": {
            "description": "date of the customer update.",
            "type": "date",
            "example": "YY-MM-DD -> 1989-12-31"
          }
        }
      },
      "CustomerCreateAndUpdate": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "email": {
            "description": "The customer email.",
            "type": "string",
            "example": "example@email.com"
          },
          "password": {
            "description": "The customer name.",
            "type": "string",
            "example": "Your password"
          }
        }
      },
      "User": {
        "required": ["id"],
        "type": "object",
        "properties": {
          
          "id": {
            "description": "The user id.",
            "type": "string",
            "example": "25acd789def..."
          },
          "email": {
            "description": "The user email.",
            "type": "string",
            "example": "example@mail.com"
          },
          "password": {
            "description": "The user password.",
            "type": "string",
            "example": "$2b$10$om4Aa5l2.QdSip87EdJM"
          },
          "createdAt": {
            "description": "date of the user creation.",
            "type": "date",
            "example": "YY-MM-DD -> 1989-12-31"
          },
          "updatedAt": {
            "description": "date of the user update.",
            "type": "date",
            "example": "YY-MM-DD -> 1989-12-31"
          }
        }
      },
      "UserCreateAndUpdate": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "email": {
            "description": "The user email.",
            "type": "string",
            "example": "example@email.com"
          },
          "password": {
            "description": "The user password.",
            "type": "string",
            "example": "Your password"
          }
        }
      },
      "RequestError": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Error code",
            "type": "integer",
            "example": "400"
          },
          "message": {
            "description": "Error message",
            "type": "string",
            "example": "Validation Errors: Invalid id, invalid email, etc"
          }
        }
      },
      "ErrorDB": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Error code",
            "type": "integer",
            "example": "500"
          },
          "message": {
            "description": "Error message",
            "type": "string",
            "example": "Search failed: description of the error"
          }
        }
      }
    }
  }
  
}
